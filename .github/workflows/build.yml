name: Build & Deploy to Scaleway
on:
  push:
    branches:
      - main

jobs:
  build-credo-backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Login to Scaleway Container Registry
        uses: docker/login-action@v3
        with:
          username: nologin
          password: ${{ secrets.SCALEWAY_API_KEY }}
          registry: ${{ secrets.CONTAINER_REGISTRY_ENDPOINT }}
      - name: Build the backend Docker image
        run: docker build ./backend -t ${{ secrets.CONTAINER_REGISTRY_ENDPOINT }}/credo-backend:latest
      - name: Push the backend Docker Image
        run: docker push ${{ secrets.CONTAINER_REGISTRY_ENDPOINT }}/credo-backend:latest
  
  build-credo-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Login to Scaleway Container Registry
        uses: docker/login-action@v3
        with:
          username: nologin
          password: ${{ secrets.SCALEWAY_API_KEY }}
          registry: ${{ secrets.CONTAINER_REGISTRY_ENDPOINT }}
      - name: Build the frontend Docker image
        run: docker build ./frontend -t ${{ secrets.CONTAINER_REGISTRY_ENDPOINT }}/credo-frontend:latest
      - name: Push the frontend Docker Image
        run: docker push ${{ secrets.CONTAINER_REGISTRY_ENDPOINT }}/credo-frontend:latest
      
  deploy:
    runs-on: ubuntu-latest
    needs: [build-credo-backend, build-credo-frontend]
    steps:
      - name: Deploy app to instance
        uses: appleboy/ssh-action@master  
        with:
          host: ${{ secrets.HOST }}         # Adresse du serveur SSH
          username: ${{ secrets.SSH_USER }}   # Nom d’utilisateur pour se connecter au serveur SSH
          key: ${{ secrets.SSH_PRIVATE_KEY }} # Clé privée SSH pour l’authentification
          port: 22
          script: |
            cd ./credo

            # Créer le fichier docker-compose.yml si non existant
            cat << EOF > docker-compose.yml
            version: '3'
            services:
              backend:
                build: 
                  context: ./backend
                  dockerfile: Dockerfile
                container_name: backend
                ports:
                  - "8007:8007"
                restart: always

              frontend:
                build:
                  context: ./frontend
                  dockerfile: Dockerfile
                container_name: frontend
                ports:
                  - "8001:8001"
                depends_on:
                  - backend
                restart: always
            EOF

            # Arrêter et supprimer les conteneurs existants
            docker-compose down || true
            docker-compose rm || true

            # Récupérer la dernière version des images depuis le registre
            docker pull ${{ secrets.CONTAINER_REGISTRY_ENDPOINT }}/credo-backend:latest || exit 1
            docker pull ${{ secrets.CONTAINER_REGISTRY_ENDPOINT }}/credo-frontend:latest || exit 1

            # Lancer les nouveaux conteneurs
            docker-compose up -d
