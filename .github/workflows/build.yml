name: Backend and Frontend Docker CI and Deploy

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # Job 1: Build and push backend image
  build-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Scaleway Container Registry
        uses: docker/login-action@v3
        with:
          username: nologin
          password: ${{ secrets.SCALEWAY_API_KEY }}
          registry: ${{ secrets.CONTAINER_REGISTRY_ENDPOINT }}

      - name: Build the backend Docker image
        run: docker-compose build backend

      - name: Tag the backend Docker image
        run: docker tag backend ${{ secrets.CONTAINER_REGISTRY_ENDPOINT }}/image1-backend:${{ github.sha }}

      - name: Push the backend Docker image
        run: docker push ${{ secrets.CONTAINER_REGISTRY_ENDPOINT }}/image1-backend:${{ github.sha }}

  # Job 2: Build and push frontend image
  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Scaleway Container Registry
        uses: docker/login-action@v3
        with:
          username: nologin
          password: ${{ secrets.SCALEWAY_API_KEY }}
          registry: ${{ secrets.CONTAINER_REGISTRY_ENDPOINT }}

      - name: Build the frontend Docker image
        run: docker-compose build frontend

      - name: Tag the frontend Docker image
        run: docker tag frontend ${{ secrets.CONTAINER_REGISTRY_ENDPOINT }}/image1-frontend:${{ github.sha }}

      - name: Push the frontend Docker image
        run: docker push ${{ secrets.CONTAINER_REGISTRY_ENDPOINT }}/image1-frontend:${{ github.sha }}

  # Job 3: Deploy backend and frontend services on the remote server
  deploy:
    needs: [build-backend, build-frontend]
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to instance
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Navigate to the docker-compose directory on the server
            cd /path/to/docker-compose
            
            # Pull the latest backend image
            docker pull ${{ secrets.CONTAINER_REGISTRY_ENDPOINT }}/image1-backend:${{ github.sha }} || exit 1
            
            # Pull the latest frontend image
            docker pull ${{ secrets.CONTAINER_REGISTRY_ENDPOINT }}/image1-frontend:${{ github.sha }} || exit 1
            
            # Stop and remove old backend and frontend containers if they exist
            docker-compose down || true

            # Start the updated containers using docker-compose
            docker-compose up -d
